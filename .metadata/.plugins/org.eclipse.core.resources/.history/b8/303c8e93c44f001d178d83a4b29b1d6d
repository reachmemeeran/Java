package com.meeran.gs.learning;

import java.util.Arrays;

public class MinSquarePath {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 int[][] grid = new int[][] {{1,3,1},{1,5,1},{4,2,1}};
                
        System.out.println("Resut-7->"+minPath(grid));
        
        grid = new int[][] {{1,2,3},{4,5,6}};
        System.out.println("Resut-12->"+minPath(grid));
        
       int[][] smallSquare = new int[][]
                {
                    { 1, 2, 3, 6, 2, 8, 1 },
                    { 4, 8, 2, 4, 3, 1, 9 },
                    { 1, 5, 3, 7, 9, 3, 1 },
                    { 4, 9, 2, 1, 6, 9, 5 },
                    { 7, 6, 8, 4, 7, 2, 6 },
                    { 2, 1, 6, 2, 4, 8, 7 },
                    { 8, 4, 3, 9, 2, 5, 8 }
                };
                
                System.out.println("Resut-1->"+minPath(smallSquare, 0, 0));
                System.out.println("Resut-5->"+minPath(smallSquare, 0, 1));
                System.out.println("Resut-11->"+minPath(smallSquare, 2, 2));
                System.out.println("Resut-24->"+minPath(smallSquare, 4, 2));
                System.out.println("Resut-39->"+minPath(smallSquare, 6, 6));
                System.out.println("Resut-24->"+minPath(smallSquare, 4, 5));
	}
	
	// 00	01
	//		11
	public static int minPath(int[][] grid) {
		int m = grid.length, n=grid[0].length;
		for(int i=1;i<m; i++) grid[i][0] +=grid[i-1][0];
		for(int j=1;j<n; j++) grid[0][j] +=grid[0][j-1];
		for(int i=1;i<m; i++) {
			for(int j=1;j<n; j++) {
				grid[i][j] += Math.min(grid[i-1][j], grid[i][j-1]);
				System.out.println("Grid i j "+i +" "+j+" "+ grid[i][j]);
			}
		}
		System.out.println("m,n-->"+m+" "+n);
		return grid[m-1][n-1];
	}
	
	public static int minPath(int[][] grid, int m, int n) {
		int[] s = new int[m+2];
        Arrays.fill(s, Integer.MAX_VALUE);
        s[1] = 0;
        
        for (int i = 0 ; i <= n ; i++)
            for (int j = 0 ; j <= m ; j++)
                s[j+1] = Math.min(s[j], s[j+1]) + grid[i][j];
                
        return s[s.length-1];
	}
}
