package com.meeran.gs.learning;

public class CycleOfArray {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] nums1 = {1, 0};
		int s1 = 0;
		int[] nums2 = {1, 2, 0};
		int s2 = 0;
		int[] nums3 = {1, 2, 3, 1};
		int s3 = 0;
		int[] nums4 = {0, 1, 1, 1};
		int s4 = 0;
		//System.out.println(findCycle(nums1, s1));
		//System.out.println(findCycle(nums2, s2));
		System.out.println(findCycle(nums3, s3)); 
		//System.out.println(findCycle(nums4, s4)); 
		
		System.out.println(findCycle(new int[]{1, 2, 0}, 0)+("======3"));
		System.out.println(findCycle(new int[]{1, 0}, 0)+("======2"));
		System.out.println(findCycle(new int[]{1, 2, 3, 1}, 0)+("======3"));
		System.out.println(findCycle(new int[]{1, 2, 3, 4}, 0)+("======-1"));
		System.out.println(findCycle(new int[]{1, 2, 3, 4}, -1)+("======-1"));
		System.out.println(findCycle(new int[]{1, 2, 3, 4}, 4)+("======-1"));
		System.out.println(findCycle(new int[]{2, 3, 4, 0}, 0)+("======-1"));
		System.out.println(findCycle(new int[]{2, 3, 0}, 0)+("======2"));
	}
	
	
	private static int findCycle(int[] nums, int start) {
		if(start<0 || start >=nums.length) return -1;
		int s=nums[start];
		int f=nums[nums[s]];
		int count=1;
		if(s==f) return -1;
		while(s!=f) {
			s=nums[s];
			count++;
			if(f<nums.length) f = nums[nums[f]];
			else return -1;
		}
		return count;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	private static int findCycle1(int[] nums, int start) {
		if(start<0 || start >=nums.length) return -1;
		int s = nums[start];
		int f = nums[nums[start]];
		int sSoFar = 1;
		if(s==f) return -1;
		while(s!=f) {
			s = nums[s];
			sSoFar++;
			if(f<nums.length) f = nums[nums[f]];
			else return -1;
		} 
		return sSoFar;
	}

}
